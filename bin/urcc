#!/usr/bin/ruby

##################################
# The main exec script for urcc
# 
##################################

require "parseconfig"
require "optparse"
require "ostruct"
require "pp"

# The urcc frontend
require "ir/urccfe.rb"

##################################
# Helper function definition
##################################

# Init configurations
def init_conf( conf_dir )

  begin
    if File.exist?( conf_dir ) 
      if not File.directory?( conf_dir )
        puts "Error creating new conf directory, file exist?"
      end

    else
      puts "Initializing config, creating new directory in " + conf_dir
      Dir.mkdir( conf_dir )
      Dir.mkdir( File.join(conf_dir, "PASSES") )
    end
    
    # Writing default config
    puts "Initializing config, creating config in " + conf_dir + "\n"
    conf_path = File.join(conf_dir, "config")
    config = File.open( conf_path, "w" )
    
    d_config = ParseConfig.new

    d_config.add_to_group("CC", "cc", "clang")
    d_config.add_to_group("CC", "opt", "opt")

    d_config.add_to_group("OUTPUT", "unopt_ir", "true")
    d_config.add_to_group("OUTPUT", "unopt_cdump", "true")
    d_config.add_to_group("OUTPUT", "unopt_bin", "true")
    d_config.add_to_group("OUTPUT", "opt_ir", "true")
    d_config.add_to_group("OUTPUT", "opt_cdump", "true")
    d_config.add_to_group("OUTPUT", "opt_bin", "true")

    d_config.add_to_group("PASSES", 
                          "pass_path",
                          File.join(conf_dir, "PASSES"))
    d_config.add_to_group("PASSES", "passes", "")

    d_config.write( config )
    config.close

  rescue Exception => e
    puts e
    puts "Error initializing config file"
  end

end


# parse input arg with optparse
def parse_args( args )
  
  options = OpenStruct.new
  options.inplace = false
  options.encoding = "utf-8"
  options.transfer_type = :auto
  options.verbose = false
  options.version = "0.0.0"

  # construct parser
  opt_parser = OptionParser.new do |opts|
    opts.banner = "Usage: urcc <filename> [options]"
    opts.separator ""

    # option directory
    opts.on("-d", "--dir DIR",
            "Target directory") do |dir|
      options.dir = dir
    end

    opts.on("-S", "--asm",
            "Assemble to ir") do |ver|
      options.asm = true
    end

    opts.on("-v", "--version",
            "Print version number") do |v|
      puts options.version
      exit
    end

    opts.on("-h", "--help",
            "Print this message") do |h|
      puts opts
      exit
    end

  end

  opt_parser.parse!( args )

  # specify input filename
  if args.empty?
    puts "Error: No file input. Please specify a c file."
    puts opt_parser
    exit
  else
    options.filename = args.pop
    if not options.filename.end_with?( ".c" )
      puts "Unsupported filetype, please input a c file"

      exit
    end

  end

  return options

end


# read in config file, return config info
def parse_config( config_path )
  begin
    config = ParseConfig.new( config_path )
  rescue
    puts "No config file specified, using default config"
  end

  return config.params

end


# wrapper for excute
def execute( cmd )
  puts "#{cmd}"
  `#{cmd}`
end


# Run passes
def run_passes( prog, config )
  # get pass names
  all_passes = config["PASSES"]["passes"]
  
  if all_passes == nil
    puts "\nno passes specified. Keep going\n\n"
    return
  else
    passes = all_passes.split( "," )
  end

  # run passes
  if not passes.empty?
    passes.each do |passname|

      # require pass, load pass module and pass Proc
      begin
        passname.strip!
        pass_dir = File.join(ENV["HOME"], ".urcc/PASSES")
        pass_file = File.join(pass_dir, passname)

        if defined?(Pass)
          PassModule.send(:remove_const, "Pass")
        end
        require_relative( pass_file )
        include( PassModule )

      rescue Exception => e
        p e
        puts "Error loading pass #{passname}"
      end

      # call pass
      begin
        puts "\n-------------------------"
        puts "Invoking #{passname} Pass"
        puts "-------------------------\n\n"
        PassModule::Pass.call( prog )
        puts "\n-------------------------\n\n"
        
      rescue Exception => e
        puts e
        puts "Error executing pass #{passname}, skipping"
      end
    end
  end

end



##################################
# Main function for urcc 
##################################
def main

  # init configuration
  config_dir = File.join(ENV["HOME"], ".urcc/")
  config_path = File.join(config_dir, "urcc.config")

  #if not File.exist?( config_path )
  #  init_conf( config_dir )
  #end

  # read args
  options = parse_args( ARGV )
  filename = options.filename
  filechomp = filename.chomp( ".c" )


  # read config for cc version and path
  config = parse_config( config_path )


  # run cc to dump ir file
  cc = config["CC"]["cc"]
  opt = config["CC"]["opt"]
  cc_flag = "-O0 -emit-llvm"
  # TODO: why add reg2mem pass?
  opt_flag = "-reg2mem -S" 
  bitcode_file = "#{filechomp}.ll"

  # TODO: selective dump files according to config
  execute "#{cc} #{cc_flag} -c #{filename} -o - | #{opt} #{opt_flag} -o #{bitcode_file}"

  # parse bitcode file with URCCFE to get AST representation
  prog = URCCFE.new(bitcode_file).astroot


  ##################################
  # run PASSes
  ##################################
  run_passes(prog, config)


  # run URCCFE to dump opted version
  # TODO: selective dump files according to config
  opt_file = filechomp + "_urcc_opt.c"
  f = File.new(opt_file, "w")
  f << URCCFE.dump_prog( prog )
  f.close

  # run cc to compile again
  opt_bin = filechomp + ".bin"
  
  cc = config["CC"]["cc"]
  opt = config["CC"]["opt"]
  cc_flag = "-O0 -Wno-format-security -Wno-implicit-function-declaration"
  execute "#{cc} #{cc_flag} -g #{opt_file} -o #{opt_bin}"


end




# Run main 

main

